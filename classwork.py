# Пользователь вводит данные. Сделайте проверку данных
# и преобразуйте если возможно в один из вариантов ниже:
# ✔ Целое положительное число
# ✔ Вещественное положительное или отрицательное число
# ✔ Строку в нижнем регистре, если в строке есть
# хотя бы одна заглавная буква
# ✔ Строку в нижнем регистре в остальных случаях


# a = input("Input: ")
# if  isinstance(a, int) and int(a) > 0:
#     print(int(a))
# elif isinstance(a, float):
#     print(float(a))
# elif any(i[0].isupper() for i in a):
#     print(a.lower())
# else:
#     print(a.lower())

# ✔ Создайте вручную кортеж содержащий элементы разных типов.
# ✔ Получите из него словарь списков, где:
# ключ — тип элемента,
# значение — список элементов данного типа.

# from pprint import pp

# a = (3, True, 'egfwe', 7.14, (5, 6, 7), {'a': 4, 'b': 5}, [None], 5, 6, 54)
# dict = {}
# for item in a:
#     if type(item) not in dict:
#         dict[type(item)] = []
#     dict[type(item)].append(item)
# pp (dict)

# ✔ Создайте вручную список с повторяющимися элементами.
# ✔ Удалите из него все элементы, которые встречаются дважды.
import random 
# a = [random.randint(0,10) for _ in range(20)]
# print(a)
# for i in a:
#     if a.count(i) == 2:
#         while i in a:
#             a.remove(i)
# print(a)


# Создайте вручную список с повторяющимися целыми числами.
# ✔ Сформируйте список с порядковыми номерами
# нечётных элементов исходного списка.
# ✔ Нумерация начинается с единицы.

# a = [random.randint(0,10) for _ in range(20)]
# print(a)
# for i in range(len(a)):
#     if a[i]%2 != 0:
#         print(i+1)
    

# Пользователь вводит строку текста. Вывести каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого длинного
# слова был один пробел между ним и номером строки.

# a = "dhef fhejf kefjeyruije"
# lst = a.split()
# lst.sort()
# for i in range(len(lst)):
#     if len(lst[i]) == len(max(lst, key = len)):
#         print(f'{i+1}. {lst[i]}')
#     else:
#         print(f'{i+1}. {lst[i]:>{len(max(lst, key = len))}}')  # выравниваем по правому краю по ширине самого длинного слова


# Пользователь вводит строку текста.
# ✔ Подсчитайте сколько раз встречается
# каждая буква в строке без использования
# метода count и с ним.
# ✔ Результат сохраните в словаре, где ключ —
# символ, а значение — частота встречи
# символа в строке.
# ✔ Обратите внимание на порядок ключей.
# Объясните почему они совпадают
# или не совпадают в ваших решениях.

# a = input("Input: ")
# count = 0
# res = {}
# res_2 = {}

# for i in a:
#         res[i] = res.get(i,0) + 1        
# print(res)


# for i in a:
#         res_2[i] = a.count(i)
# print(res_2)

# Напишите функцию, которая принимает строку текста.
# Вывести функцией каждое слово с новой строки.
# ✔ Строки нумеруются начиная с единицы.
# ✔ Слова выводятся отсортированными согласно кодировки Unicode.
# ✔ Текст выравнивается по правому краю так, чтобы у самого
# длинного слова был один пробел между ним и номером строки.

# ✔ Напишите функцию, которая принимает строку текста.
# ✔ Сформируйте список с уникальными кодами Unicode каждого
# символа введённой строки отсортированный по убыванию.

# stroka = "dsghewgydehd uweyew jjryyy"

# def unicode_func(a: str):
#     res = []
#     for i in set(a):
#         res.append(ord(i))
#     res = sorted(res, reverse = True)
#     return res

# print(unicode_func(stroka))

# ✔ Функция получает на вход строку из двух чисел через пробел.
# ✔ Сформируйте словарь, где ключом будет
# символ из Unicode, а значением — целое число.
# ✔ Диапазон пар ключ-значение от наименьшего из введённых
# пользователем чисел до наибольшего включительно.

# a = input("Input your numbers: ")

# def chars_dict(a: str):
#     new_a = list(map(int, a.split()))
#     new_a.sort()   
#     res = {chr(int(i)): int(i) for i in range(new_a[0], new_a[1] + 1)}
#     return res
# # или
#     res = sorted([int[i] for i in a.split()])
#     return {chr(i) : i for i in range(res[0], res[1] + 1)}

# print(chars_dict(a))


# ✔ Функция принимает на вход три списка одинаковой длины:
# ✔ имена str,
# ✔ ставка int,
# ✔ премия str с указанием процентов вида «10.25%».
# ✔ Вернуть словарь с именем в качестве ключа и суммой
# премии в качестве значения.
# ✔ Сумма рассчитывается как ставка умноженная на процент премии. 

# name = ["Tom", "Jack", "Sara", "Mary"]
# salary = [200, 50 , 60, 70]
# bonus = ["10.25%", "5%", "7.1%", "6%"]

# def make_dict(a: list, b: list, c: list):
#     c = [float(i.replace("%"," "))/100 for i in c]
#     res = { name : salary*bonus for name, salary, bonus in zip(a, b, c, strict = False) }
#     return res

# print(make_dict(name, salary, bonus))

# ✔ Функция получает на вход список чисел и два индекса.
# ✔ Вернуть сумму чисел между между переданными индексами.
# ✔ Если индекс выходит за пределы списка, сумма считается
# # до конца и/или начала списка.
# def do_sum(lst: list[int], start: int, stop: int):
#     res = 0
#     if stop > len(lst):
#         for i in range (start, len(lst)):
#            res += lst[i]
#     else:
#         for i in range (start, stop):
#             res += lst[i]
#     return res

# lst = [1,7,3, 0, 8, 9, 10]
# print(do_sum(lst, 0, 3))

# ✔ Функция получает на вход словарь с названием компании в качестве ключа
# и списком с доходами и расходами (3-10 чисел) в качестве значения.
# ✔ Вычислите итоговую прибыль или убыток каждой компании. Если все компании
# прибыльные, верните истину, а если хотя бы одна убыточная — ложь.
def revenue(company: dict):
    for _ in company.values():
        sum(company.values)
    res = filter(company,)