# –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ 
# –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
# üìå–°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
# üìå–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç: ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞, 
# ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞, ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
# üìå–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.

import logging
from collections import namedtuple
import os 
import  argparse

my_format = ("{levelname} - {asctime}")
logging.basicConfig(filename='hws\files.log', filemode='a', encoding='UTF-8',
level=logging.INFO, style='{', format=my_format)
logger = logging.getLogger(__name__)

Result = namedtuple("Result", ["–∏–º—è", "—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ", "—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞—Ç–∞–ª–æ–≥"], defaults=[None, None, None])

def walk_dir(path: str = os.getcwd()):
    items = []
    path = os.path.abspath(path)
    parent = path.rstrip('/').rsplit('/', 1)[1]
    try:
        for item in os.listdir(path):
            name, ext = None, None
            item: str = item.rsplit('/',1)[1]
            if item.rfind('.') != -1 and not item.startswith('.'):
                name, ext = item.rsplit('.', 1)
            else:
               name = item
            items.append(Result(name, ext, parent))
        logger.info()
    except Exception as e:
       logger.error(msg=f'{e.__class__.name__}: {e}')
    return items                     

def parse_ars():
    parser = argparse.ArgumentParser(description="directory content information")
    parser.add_argument('-p', metavar='path', type=str, nargs='*', default='.', help='input directiry path: ')
    args = parser.parse_args()
    return args.p

def main():
    for item in parse_ars():
        for elem in (walk_dir(item)):
            print(repr(elem))

if __name__ == '__main__':
    main()



