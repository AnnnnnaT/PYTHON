# –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –∑–∞–¥–∞—á–∏ 1 —Ç–µ—Å—Ç—ã doctest. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ
# —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
# –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏
# —Å–∏–º–≤–æ–ª–æ–≤
# –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
# –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–∫–≤ –¥—Ä—É–≥–∏—Ö –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
# –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
# (–∫—Ä–æ–º–µ –ø. 1)


from string import ascii_lowercase
import doctest

def clear_text(text:str):
    """
    Clear text
    >>> clear_text('text') == 'text'
    True
    >>> clear_text('TexT') == 'text'
    True
    >>> clear_text('te.xT') == 'text'
    True
    >>> clear_text('T–§–§—Ñ—Ñext') == 'text'
    True
    >>> clear_text('Te–Ø..xT') == 'text'
    True
    """
    result = ''
    for i in text:
        if i.lower() in ascii_lowercase + ' ':
            result += i
    return result.lower()

if __name__ == '__main__':
    doctest.testmod(verbose=True)


import unittest

class TestUnitCheck(unittest.TestCase):

    def setUp(self):
        self.first = Rectangle(2, 3)
        self.second = Rectangle(4, 5)

    def test_eq(self):
        self.assertTrue(self.first == self.second)

    def test_not_eq(self):
        self.assertFalse(self.first == self.second)

    def test_sum(self):
        self.assertEqual(self.first + self.second, Rectangle(6, 8))

    def test_exist(self):
        self.assertRaises(ValueError, Rectangle, (0, 3))

if __name__ == '__main__':
    unittest.main(verbosity=2)
  
# üìå–ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
# üìå–ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ä–∞–∑–º–µ—Ä–∞.

class ValidateRectangle:
    def __init__(self, min_value: int = 1):
        self.min_value = min_value

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError('Invalid type of input')
        if value < self.min_value:
            raise ValueError('Invalid value of input')


class Rectangle:
    width = ValidateRectangle()
    height = ValidateRectangle()

    def __init__(self, width, height):
        self._width = width
        self._height = height

    def perimeter(self):
        return 2 * (self._width + self._height)

    def area(self):
        return self._width * self._height

    def __add__(self, other):
        return Rectangle(self.width + other.width, self.height + other.height)

    def __eq__(self, other):
        return self.width == other.width and self.height == other.height

    def __str__(self):
        return f"–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ {self._width} –∏ {self._height}"

    def __repr__(self):
        return f"{self.__class__.__name__}({self._width}, {self._height})"

r1 = Rectangle(1, 2)
print(r1)
r1.width = 5
print(r1)
r1.width = -1